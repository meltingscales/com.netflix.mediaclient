package o;

import com.netflix.msl.MslConstants;
import com.netflix.msl.MslInternalException;
import java.util.HashSet;
import java.util.Set;

/* renamed from: o.dje  reason: case insensitive filesystem */
/* loaded from: classes5.dex */
public class C8373dje {
    public static final C8373dje A;
    public static final C8373dje B;
    public static final C8373dje C;
    public static final C8373dje D;
    public static final C8373dje E;
    public static final C8373dje F;
    public static final C8373dje G;
    public static final C8373dje H;
    public static final C8373dje I;

    /* renamed from: J  reason: collision with root package name */
    public static final C8373dje f13847J;
    public static final C8373dje K;
    public static final C8373dje L;
    public static final C8373dje M;
    public static final C8373dje N;
    public static final C8373dje O;
    public static final C8373dje P;
    public static final C8373dje Q;
    public static final C8373dje R;
    public static final C8373dje S;
    public static final C8373dje T;
    public static final C8373dje U;
    public static final C8373dje V;
    public static final C8373dje W;
    public static final C8373dje X;
    public static final C8373dje Y;
    public static final C8373dje Z;
    public static final C8373dje a;
    public static final C8373dje aA;
    public static final C8373dje aB;
    public static final C8373dje aC;
    public static final C8373dje aD;
    public static final C8373dje aE;
    public static final C8373dje aF;
    public static final C8373dje aG;
    public static final C8373dje aH;
    public static final C8373dje aI;
    public static final C8373dje aJ;
    public static final C8373dje aK;
    public static final C8373dje aL;
    public static final C8373dje aM;
    public static final C8373dje aN;
    public static final C8373dje aO;
    public static final C8373dje aP;
    public static final C8373dje aQ;
    public static final C8373dje aR;
    public static final C8373dje aS;
    public static final C8373dje aT;
    public static final C8373dje aU;
    public static final C8373dje aV;
    public static final C8373dje aW;
    public static final C8373dje aX;
    public static final C8373dje aY;
    public static final C8373dje aZ;
    public static final C8373dje aa;
    public static final C8373dje ab;
    public static final C8373dje ac;
    public static final C8373dje ad;
    public static final C8373dje ae;
    public static final C8373dje af;
    public static final C8373dje ag;
    public static final C8373dje ah;
    public static final C8373dje ai;
    public static final C8373dje aj;
    public static final C8373dje ak;
    public static final C8373dje al;
    public static final C8373dje am;
    public static final C8373dje an;
    public static final C8373dje ao;
    public static final C8373dje ap;
    public static final C8373dje aq;
    public static final C8373dje ar;
    public static final C8373dje as;
    public static final C8373dje at;
    public static final C8373dje au;
    public static final C8373dje av;
    public static final C8373dje aw;
    public static final C8373dje ax;
    public static final C8373dje ay;
    public static final C8373dje az;
    public static final C8373dje b;
    public static final C8373dje bA;
    public static final C8373dje bB;
    public static final C8373dje bC;
    public static final C8373dje bD;
    public static final C8373dje bE;
    public static final C8373dje bF;
    public static final C8373dje bG;
    public static final C8373dje bH;
    public static final C8373dje bI;
    public static final C8373dje bJ;
    public static final C8373dje bK;
    public static final C8373dje bL;
    public static final C8373dje bM;
    public static final C8373dje bN;
    public static final C8373dje bO;
    public static final C8373dje bP;
    public static final C8373dje bQ;
    public static final C8373dje bR;
    public static final C8373dje bS;
    public static final C8373dje bT;
    public static final C8373dje bU;
    public static final C8373dje bV;
    public static final C8373dje bW;
    public static final C8373dje bX;
    public static final C8373dje bY;
    public static final C8373dje bZ;
    public static final C8373dje ba;
    public static final C8373dje bb;
    public static final C8373dje bc;
    public static final C8373dje bd;
    public static final C8373dje be;
    public static final C8373dje bf;
    public static final C8373dje bg;
    public static final C8373dje bh;
    public static final C8373dje bi;
    public static final C8373dje bj;
    public static final C8373dje bk;
    public static final C8373dje bl;
    public static final C8373dje bm;
    public static final C8373dje bn;
    public static final C8373dje bo;
    public static final C8373dje bp;
    public static final C8373dje bq;
    public static final C8373dje br;
    public static final C8373dje bs;
    public static final C8373dje bt;
    public static final C8373dje bu;
    public static final C8373dje bv;
    public static final C8373dje bw;
    public static final C8373dje bx;
    public static final C8373dje by;
    public static final C8373dje bz;
    public static final C8373dje c;
    public static final C8373dje cA;
    public static final C8373dje cB;
    public static final C8373dje cC;
    public static final C8373dje cD;
    public static final C8373dje cE;
    public static final C8373dje cF;
    public static final C8373dje cG;
    public static final C8373dje cH;
    public static final C8373dje cI;
    public static final C8373dje cJ;
    public static final C8373dje cK;
    public static final C8373dje cL;
    public static final C8373dje cM;
    public static final C8373dje cN;
    public static final C8373dje cO;
    public static final C8373dje cP;
    public static final C8373dje cQ;
    public static final C8373dje cR;
    public static final C8373dje cS;
    public static final C8373dje cT;
    public static final C8373dje cU;
    public static final C8373dje cV;
    public static final C8373dje cW;
    public static final C8373dje cX;
    public static final C8373dje cY;
    public static final C8373dje cZ;
    public static final C8373dje ca;
    public static final C8373dje cb;
    public static final C8373dje cc;
    public static final C8373dje cd;
    public static final C8373dje ce;
    public static final C8373dje cf;
    public static final C8373dje cg;
    public static final C8373dje ch;
    public static final C8373dje ci;
    public static final C8373dje cj;
    public static final C8373dje ck;
    public static final C8373dje cl;
    public static final C8373dje cm;
    public static final C8373dje cn;
    public static final C8373dje co;
    public static final C8373dje cp;
    public static final C8373dje cq;
    public static final C8373dje cr;
    public static final C8373dje cs;
    public static final C8373dje ct;
    public static final C8373dje cu;
    public static final C8373dje cv;
    public static final C8373dje cw;
    public static final C8373dje cx;
    public static final C8373dje cy;
    public static final C8373dje cz;
    public static final C8373dje d;
    public static final C8373dje da;
    public static final C8373dje db;
    public static final C8373dje dc;
    public static final C8373dje dd;
    public static final C8373dje de;
    public static final C8373dje df;
    public static final C8373dje dg;
    public static final C8373dje dh;
    public static final C8373dje di;
    public static final C8373dje dj;
    public static final C8373dje dk;
    public static final C8373dje dl;
    public static final C8373dje dm;
    public static final C8373dje dn;

    /* renamed from: do  reason: not valid java name */
    public static final C8373dje f34do;
    public static final C8373dje dp;
    public static final C8373dje dq;
    public static final C8373dje ds;
    private static final Set<Integer> dt = new HashSet();
    public static final C8373dje du;
    public static final C8373dje e;
    public static final C8373dje f;
    public static final C8373dje g;
    public static final C8373dje h;
    public static final C8373dje i;
    public static final C8373dje j;
    public static final C8373dje k;
    public static final C8373dje l;
    public static final C8373dje m;
    public static final C8373dje n;

    /* renamed from: o  reason: collision with root package name */
    public static final C8373dje f13848o;
    public static final C8373dje p;
    public static final C8373dje q;
    public static final C8373dje r;
    public static final C8373dje s;
    public static final C8373dje t;
    public static final C8373dje u;
    public static final C8373dje v;
    public static final C8373dje w;
    public static final C8373dje x;
    public static final C8373dje y;
    public static final C8373dje z;
    private final int dr;
    private final String dv;
    private final MslConstants.ResponseCode dz;

    public int a() {
        return this.dr;
    }

    public String d() {
        return this.dv;
    }

    static {
        MslConstants.ResponseCode responseCode = MslConstants.ResponseCode.FAIL;
        bd = new C8373dje(0, responseCode, "Error parsing MSL encodable.");
        bc = new C8373dje(1, responseCode, "Error encoding MSL encodable.");
        v = new C8373dje(2, responseCode, "Computed hash does not match envelope hash.");
        T = new C8373dje(3, responseCode, "Invalid public key provided.");
        W = new C8373dje(4, responseCode, "Invalid private key provided.");
        br = new C8373dje(5, responseCode, "Plaintext is not a multiple of the block size.");
        bu = new C8373dje(6, responseCode, "Plaintext contains incorrect padding.");
        e = new C8373dje(7, responseCode, "Ciphertext is not a multiple of the block size.");
        c = new C8373dje(8, responseCode, "Ciphertext contains incorrect padding.");
        k = new C8373dje(9, responseCode, "Encryption not supported.");
        j = new C8373dje(10, responseCode, "Decryption not supported.");
        z = new C8373dje(11, responseCode, "Encryption envelope key ID does not match crypto context key ID.");
        d = new C8373dje(12, responseCode, "Error parsing ciphertext envelope.");
        a = new C8373dje(13, responseCode, "Error encoding ciphertext envelope.");
        bR = new C8373dje(14, responseCode, "Sign not supported.");
        dl = new C8373dje(15, responseCode, "Verify not suppoprted.");
        bS = new C8373dje(16, responseCode, "Signature not initialized or unable to process data/signature.");
        H = new C8373dje(17, responseCode, "Error computing HMAC.");
        m = new C8373dje(18, responseCode, "Error encrypting plaintext.");
        h = new C8373dje(19, responseCode, "Error decrypting ciphertext.");
        f13847J = new C8373dje(20, responseCode, "Insufficient ciphertext for decryption.");
        bN = new C8373dje(21, responseCode, "Error when creating session keys.");
        V = new C8373dje(24, responseCode, "Invalid symmetric key.");
        S = new C8373dje(25, responseCode, "Invalid encryption key.");
        O = new C8373dje(26, responseCode, "Invalid HMAC key.");
        dq = new C8373dje(27, responseCode, "Wrap not supported.");
        cz = new C8373dje(28, responseCode, "Unwrap not supported.");
        cg = new C8373dje(29, responseCode, "Unidentified JSON web key type.");
        ch = new C8373dje(30, responseCode, "Unidentified JSON web key usage.");
        ca = new C8373dje(31, responseCode, "Unidentified JSON web key algorithm.");
        dk = new C8373dje(32, responseCode, "Error wrapping plaintext.");
        cB = new C8373dje(33, responseCode, "Error unwrapping ciphertext.");
        P = new C8373dje(34, responseCode, "Invalid JSON web key.");
        U = new C8373dje(35, responseCode, "Invalid JSON web key keydata.");
        ct = new C8373dje(36, responseCode, "Unsupported JSON web key algorithm.");
        dh = new C8373dje(37, responseCode, "Error when creating wrapping key.");
        ab = new C8373dje(38, responseCode, "Invalid wrap ciphertext.");
        cp = new C8373dje(39, responseCode, "Unsupported JSON web encryption algorithm.");
        aa = new C8373dje(40, responseCode, "Error encoding JSON web encryption header.");
        Z = new C8373dje(41, responseCode, "Error parsing JSON web encryption header.");
        N = new C8373dje(42, responseCode, "Invalid algorithm parameters.");
        Y = new C8373dje(43, responseCode, "JSON web encryption header algorithms mismatch.");
        at = new C8373dje(44, responseCode, "Error importing key.");
        au = new C8373dje(45, responseCode, "Error exporting key.");
        f = new C8373dje(46, responseCode, "Error in digest.");
        cu = new C8373dje(47, responseCode, "Unsupported key type or algorithm.");
        cr = new C8373dje(48, responseCode, "Unsupported JSON web encryption serialization.");
        ac = new C8373dje(51, responseCode, "Invalid wrapping key.");
        cb = new C8373dje(52, responseCode, "Unidentified ciphertext envelope version.");
        cn = new C8373dje(53, responseCode, "Unidentified signature envelope version.");
        cs = new C8373dje(54, responseCode, "Unsupported ciphertext envelope version.");
        cC = new C8373dje(55, responseCode, "Unsupported signature envelope version.");
        cc = new C8373dje(56, responseCode, "Unidentified cipher specification.");
        bU = new C8373dje(57, responseCode, "Unidentified algorithm.");
        bT = new C8373dje(58, responseCode, "Error parsing signature envelope.");
        bL = new C8373dje(59, responseCode, "Error encoding signature envelope.");
        X = new C8373dje(60, responseCode, "Invalid signature.");
        i = new C8373dje(61, responseCode, "Error deriving key.");
        ce = new C8373dje(62, responseCode, "Unidentified JSON web key key operation.");
        C = new C8373dje(63, responseCode, "Error generating key.");
        Q = new C8373dje(64, responseCode, "Invalid initialization vector.");
        R = new C8373dje(65, responseCode, "Invalid ciphertext.");
        bQ = new C8373dje(66, responseCode, "Signature is missing from header.");
        bh = new C8373dje(67, responseCode, "Failure during MSL Message byte parsing.");
        bf = new C8373dje(68, responseCode, "Anomalous content found in MSL Message.");
        MslConstants.ResponseCode responseCode2 = MslConstants.ResponseCode.ENTITY_REAUTH;
        aK = new C8373dje(1000, responseCode2, "Master token is not trusted.");
        aA = new C8373dje(1001, responseCode2, "Unable to construct symmetric keys from master token.");
        aw = new C8373dje(1002, responseCode2, "Master token expiration timestamp is before the renewal window opens.");
        aG = new C8373dje(1003, responseCode2, "No master token session data found.");
        az = new C8373dje(1004, responseCode2, "Master token sequence number is out of range.");
        aE = new C8373dje(1005, responseCode2, "Master token serial number is out of range.");
        aI = new C8373dje(1006, responseCode2, "Invalid master token data.");
        aJ = new C8373dje(1007, responseCode2, "Invalid master token signature.");
        aF = new C8373dje(1008, responseCode2, "Invalid master token session data.");
        aD = new C8373dje(1009, responseCode2, "Master token sequence number does not have the expected value.");
        aL = new C8373dje(1010, responseCode2, "No master token data found.");
        aH = new C8373dje(1011, responseCode2, "Error parsing master token data.");
        aC = new C8373dje(1012, responseCode2, "Error parsing master token session data.");
        aB = new C8373dje(1013, responseCode2, "Master token entity identity is revoked.");
        ax = new C8373dje(1014, responseCode2, "Master token is rejected by the application.");
        ay = new C8373dje(1015, responseCode, "Master token issuer data encoding error.");
        MslConstants.ResponseCode responseCode3 = MslConstants.ResponseCode.USER_REAUTH;
        cW = new C8373dje(2000, responseCode3, "User ID token master token serial number does not match master token serial number.");
        cV = new C8373dje(2001, responseCode3, "User ID token is not decrypted or verified.");
        cU = new C8373dje(2002, responseCode3, "User ID token requires a master token.");
        cO = new C8373dje(2003, responseCode3, "User ID token expiration timestamp is before the renewal window opens.");
        dc = new C8373dje(2004, responseCode3, "No user ID token user data found.");
        cT = new C8373dje(2005, responseCode3, "User ID token is bound to an unknown master token.");
        cS = new C8373dje(2006, responseCode3, "User ID token master token serial number is out of range.");
        cX = new C8373dje(2007, responseCode3, "User ID token serial number is out of range.");
        da = new C8373dje(2008, responseCode3, "Invalid user ID token data.");
        cZ = new C8373dje(2009, responseCode3, "Invalid user ID token signature.");
        de = new C8373dje(2010, responseCode3, "Invalid user ID token user data.");
        cQ = new C8373dje(2011, responseCode3, "Invalid user ID token user identity.");
        bx = new C8373dje(2012, responseCode3, "The entity is not associated with the user.");
        df = new C8373dje(2015, responseCode3, "The user ID token and user authentication data user identities do not match.");
        dg = new C8373dje(2016, responseCode3, "No user ID token data found.");
        dd = new C8373dje(2017, responseCode3, "Error parsing user ID token data.");
        dj = new C8373dje(2018, responseCode3, "Error parsing user ID token user data.");
        db = new C8373dje(2019, responseCode3, "User ID token is revoked.");
        MslConstants.ResponseCode responseCode4 = MslConstants.ResponseCode.USERDATA_REAUTH;
        cY = new C8373dje(2020, responseCode4, "User ID token is rejected by the application.");
        bA = new C8373dje(3000, responseCode, "Service token master token serial number does not match master token serial number.");
        bK = new C8373dje(3001, responseCode, "Service token user ID token serial number does not match user ID token serial number.");
        bF = new C8373dje(3002, responseCode, "Service token data invalid.");
        bE = new C8373dje(3003, responseCode, "Service token is bound to an unknown master token.");
        bO = new C8373dje(3004, responseCode, "Service token is bound to an unknown user ID token.");
        bG = new C8373dje(3005, responseCode, "Service token master token serial number is out of range.");
        bM = new C8373dje(3006, responseCode, "Service token user ID token serial number is out of range.");
        bI = new C8373dje(3007, responseCode, "Invalid service token data.");
        bH = new C8373dje(3008, responseCode, "Invalid service token signature.");
        bJ = new C8373dje(3009, responseCode, "No service token data found.");
        cd = new C8373dje(4000, responseCode, "Unable to identify entity authentication scheme.");
        p = new C8373dje(4001, responseCode, "No factory registered for entity authentication scheme.");
        MslConstants.ResponseCode responseCode5 = MslConstants.ResponseCode.ENTITYDATA_REAUTH;
        ds = new C8373dje(4002, responseCode5, "Error parsing X.509 certificate data.");
        f34do = new C8373dje(4003, responseCode5, "Error encoding X.509 certificate data.");
        du = new C8373dje(4004, responseCode5, "X.509 certificate verification failed.");
        y = new C8373dje(4005, responseCode, "Entity not recognized.");
        M = new C8373dje(4006, responseCode, "Entity used incorrect entity authentication data type.");
        bD = new C8373dje(4007, responseCode5, "RSA public key not found.");
        co = new C8373dje(4023, responseCode, "Unsupported entity authentication data.");
        w = new C8373dje(4025, responseCode, "Entity is revoked.");
        x = new C8373dje(4026, responseCode5, "Entity is rejected by the application.");
        dn = new C8373dje(4028, responseCode5, "X.509 certificate is expired.");
        dm = new C8373dje(4029, responseCode5, "X.509 certificate is not yet valid.");
        dp = new C8373dje(4030, responseCode5, "X.509 certificate is invalid.");
        bC = new C8373dje(4031, responseCode5, "RSA private key not found.");
        q = new C8373dje(4032, responseCode, "Entity authentication data master token is not decrypted or verified.");
        s = new C8373dje(4033, responseCode5, "Invalid entity authentication data siganture.");
        r = new C8373dje(4034, responseCode5, "Invalid entity authentication data ciphertext.");
        u = new C8373dje(4035, responseCode5, "Entity authentication data signature verification failed.");
        t = new C8373dje(4036, responseCode, "Invalid entity authentication data master token.");
        f13848o = new C8373dje(4037, responseCode5, "ECC public key not found.");
        g = new C8373dje(4038, responseCode5, "ECC private key not found.");
        cj = new C8373dje(5003, responseCode, "Unable to identify user authentication scheme.");
        cG = new C8373dje(5004, responseCode, "No factory registered for user authentication scheme.");
        n = new C8373dje(5005, responseCode4, "Email or password is blank.");
        l = new C8373dje(5007, responseCode4, "Email or password is incorrect.");
        cA = new C8373dje(5008, responseCode, "Unsupported user authentication data.");
        cK = new C8373dje(5011, responseCode4, "User authentication data user ID token is invalid.");
        cm = new C8373dje(5013, responseCode, "Unable to identify user authentication mechanism.");
        cy = new C8373dje(5014, responseCode, "Unsupported user authentication mechanism.");
        cI = new C8373dje(5016, responseCode4, "User authentication required master token is missing.");
        cL = new C8373dje(5021, responseCode4, "User authentication data user ID token is not decrypted or verified.");
        cH = new C8373dje(5024, responseCode4, "User authentication data master token is invalid.");
        cM = new C8373dje(5025, responseCode4, "User authentication data master token is not decrypted or verified.");
        cJ = new C8373dje(5030, responseCode4, "User authentication required user ID token is missing.");
        cE = new C8373dje(5032, responseCode4, "User authentication data does not match entity identity.");
        cF = new C8373dje(5033, responseCode, "Entity used incorrect user authentication data type.");
        di = new C8373dje(5037, responseCode4, "User is rejected by the application.");
        cR = new C8373dje(5040, responseCode4, "The entity is not associated with the user.");
        cD = new C8373dje(5041, responseCode4, "Entity and user combination used incorrect user authentication data type.");
        cP = new C8373dje(5042, responseCode4, "User authentication data signature verification failed.");
        cN = new C8373dje(5043, responseCode4, "User ID token could not be checked for revocation.");
        cq = new C8373dje(6000, responseCode, "Unsupported compression algorithm.");
        b = new C8373dje(6001, responseCode, "Error compressing data.");
        bP = new C8373dje(6002, responseCode, "Error uncompressing data.");
        aP = new C8373dje(6003, responseCode, "Message header entity authentication data or master token not found.");
        bo = new C8373dje(6004, responseCode, "Payload chunk message ID does not match header message ID .");
        bm = new C8373dje(6005, responseCode, "Payload chunk sequence number does not match expected sequence number.");
        bt = new C8373dje(6006, responseCode, "Payload chunk payload signature verification failed.");
        aM = new C8373dje(6007, responseCode, "No message data found.");
        aS = new C8373dje(6008, responseCode, "Malformed message data.");
        bb = new C8373dje(6009, responseCode, "Message header/error data signature verification failed.");
        E = new C8373dje(6010, responseCode, "No header data found.");
        bn = new C8373dje(6011, responseCode, "No payload data found in non-EOM payload chunk.");
        bk = new C8373dje(6012, responseCode, "Corrupt payload data found in non-EOM payload chunk.");
        bZ = new C8373dje(6013, responseCode, "Unidentified compression algorithm.");
        MslConstants.ResponseCode responseCode6 = MslConstants.ResponseCode.EXPIRED;
        aN = new C8373dje(6014, responseCode6, "Message expired and not renewable or missing key request data. Rejected.");
        aR = new C8373dje(6015, responseCode, "Message ID is is out of range.");
        K = new C8373dje(6016, responseCode, "Error header internal code is negative.");
        bV = new C8373dje(6017, responseCode, "Unexpected response message ID. Possible replay.");
        MslConstants.ResponseCode responseCode7 = MslConstants.ResponseCode.KEYX_REQUIRED;
        bv = new C8373dje(6018, responseCode7, "Message response requires encryption.");
        bs = new C8373dje(6019, responseCode, "Payload chunk sequence number is out of range.");
        bp = new C8373dje(6020, responseCode, "Payload chunk message ID is out of range.");
        aW = new C8373dje(6021, MslConstants.ResponseCode.REPLAYED, "Non-replayable message replayed.");
        F = new C8373dje(6022, responseCode, "Non-replayable message sent without a master token.");
        I = new C8373dje(6023, responseCode, "Invalid Header signature.");
        D = new C8373dje(6024, responseCode, "Invalid header data.");
        bl = new C8373dje(6025, responseCode, "Invalid payload.");
        bq = new C8373dje(6026, responseCode, "Invalid payload signature.");
        bw = new C8373dje(6027, responseCode7, "Message response requires a master token.");
        bB = new C8373dje(6028, responseCode3, "Message response requires a user ID token.");
        bz = new C8373dje(6029, responseCode, "User-associated message requires user authentication data.");
        bW = new C8373dje(6030, responseCode, "Message sender is not the master token entity.");
        bg = new C8373dje(6031, responseCode, "Non-replayable message requires a master token.");
        bi = new C8373dje(6032, responseCode, "Non-replayable message non-replayable ID is out of range.");
        aZ = new C8373dje(6033, responseCode, "Service token master token or user ID token serial number does not match the message token serial numbers.");
        aT = new C8373dje(6034, responseCode, "Peer service token master token or user ID token serial number does not match the message peer token serial numbers.");
        by = new C8373dje(6035, responseCode7, "Message response requires integrity protection.");
        B = new C8373dje(6036, responseCode, "Handshake message is not renewable or does not contain key request data.");
        ba = new C8373dje(6037, responseCode, "Message recipient does not match local identity.");
        aO = new C8373dje(6038, responseCode5, "Message header entity-based signature verification failed.");
        aU = new C8373dje(6039, responseCode2, "Message header master token-based signature verification failed.");
        aY = new C8373dje(6040, responseCode2, "Non-replayable message replayed with a sequence number that is too far out of sync to recover.");
        bY = new C8373dje(6041, responseCode, "Message sender is equal to the local entity.");
        bX = new C8373dje(6042, responseCode, "User authentication data included in unencrypted message header.");
        aX = new C8373dje(6043, responseCode, "Message sender entity identity does not match expected identity.");
        aQ = new C8373dje(6044, responseCode6, "Message expired and not renewable. Rejected.");
        aV = new C8373dje(6045, responseCode6, "Message expired and missing key request data. Rejected.");
        G = new C8373dje(6046, responseCode, "Master token identity does not match entity authentication data identity.");
        A = new C8373dje(6047, responseCode, "Handshake message requires key request data.");
        ck = new C8373dje(7000, responseCode, "Unable to identify key exchange scheme.");
        ae = new C8373dje(7001, responseCode, "No factory registered for key exchange scheme.");
        an = new C8373dje(7002, responseCode, "No key request found matching header key response data.");
        ci = new C8373dje(7003, responseCode, "Unable to identify key exchange key ID.");
        cx = new C8373dje(7004, responseCode, "Unsupported key exchange key ID.");
        cf = new C8373dje(7005, responseCode, "Unable to identify key exchange mechanism.");
        cv = new C8373dje(7006, responseCode, "Unsupported key exchange mechanism.");
        ao = new C8373dje(7007, responseCode, "Key exchange response does not match request.");
        aq = new C8373dje(7008, responseCode, "Key exchange private key missing.");
        cl = new C8373dje(7009, responseCode, "Key exchange parameters ID unknown or invalid.");
        ar = new C8373dje(7010, responseCode, "Master token required for key exchange is missing.");
        al = new C8373dje(7011, responseCode, "Key exchange public key is invalid.");
        ap = new C8373dje(7012, responseCode, "Key exchange public key missing.");
        av = new C8373dje(7013, responseCode, "Key exchange wrapping key missing.");
        as = new C8373dje(7014, responseCode, "Key exchange wrapping key ID missing.");
        aj = new C8373dje(7015, responseCode, "Key exchange wrapping key is invalid.");
        ad = new C8373dje(7016, responseCode, "Entity used incorrect key exchange data type.");
        ah = new C8373dje(7017, responseCode, "Entity used incorrect key exchange mecahnism.");
        af = new C8373dje(7018, responseCode, "Key exchange derivation key missing.");
        am = new C8373dje(7019, responseCode, "Key exchange encryption key is invalid.");
        ak = new C8373dje(7020, responseCode, "Key exchange HMAC key is invalid.");
        ai = new C8373dje(7021, responseCode, "Key exchange wrap data is invalid.");
        cw = new C8373dje(7022, responseCode, "Unsupported key exchange scheme.");
        ag = new C8373dje(7023, responseCode, "Key exchange identity not found.");
        L = new C8373dje(9000, MslConstants.ResponseCode.TRANSIENT_FAILURE, "Internal exception.");
        be = new C8373dje(9001, responseCode, "Error communicating with MSL entity.");
        bj = new C8373dje(9999, responseCode, "Special unit test error.");
    }

    /* JADX INFO: Access modifiers changed from: protected */
    public C8373dje(int i2, MslConstants.ResponseCode responseCode, String str) {
        Set<Integer> set = dt;
        synchronized (set) {
            if (set.contains(Integer.valueOf(i2))) {
                throw new MslInternalException("Duplicate MSL error definition for error code " + i2 + ".");
            }
            set.add(Integer.valueOf(i2));
        }
        this.dr = i2 + 100000;
        this.dz = responseCode;
        this.dv = str;
    }

    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }
        if (obj instanceof C8373dje) {
            C8373dje c8373dje = (C8373dje) obj;
            return this.dr == c8373dje.dr && this.dz == c8373dje.dz;
        }
        return false;
    }

    public int hashCode() {
        return Integer.valueOf(this.dr).hashCode() ^ this.dz.hashCode();
    }

    public String toString() {
        return "MslError{" + this.dr + "," + this.dz.e() + "," + this.dv + "}";
    }
}
