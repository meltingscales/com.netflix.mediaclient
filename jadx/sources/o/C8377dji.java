package o;

import com.netflix.msl.MslConstants;

/* renamed from: o.dji  reason: case insensitive filesystem */
/* loaded from: classes5.dex */
public class C8377dji extends C8373dje {
    public static final C8373dje dA;
    public static final C8373dje dB;
    public static final C8373dje dC;
    public static final C8373dje dD;
    public static final C8373dje dE;
    public static final C8373dje dF;
    public static final C8373dje dG;
    public static final C8373dje dH;
    public static final C8373dje dI;
    public static final C8373dje dJ;
    public static final C8373dje dK;
    public static final C8373dje dL;
    public static final C8373dje dM;
    public static final C8373dje dN;
    public static final C8373dje dO;
    public static final C8373dje dP;
    public static final C8373dje dQ;
    public static final C8373dje dR;
    public static final C8373dje dS;
    public static final C8373dje dT;
    public static final C8373dje dU;
    public static final C8373dje dV;
    public static final C8373dje dW;
    public static final C8373dje dX;
    public static final C8373dje dY;
    public static final C8373dje dZ;
    public static final C8373dje dr;
    public static final C8373dje dt;
    public static final C8373dje dv;
    public static final C8373dje dw;
    public static final C8373dje dx;
    public static final C8373dje dy;
    public static final C8373dje dz;
    public static final C8373dje eA;
    public static final C8373dje eB;
    public static final C8373dje eC;
    public static final C8373dje eD;
    public static final C8373dje eE;
    public static final C8373dje eF;
    public static final C8373dje eG;
    public static final C8373dje eH;
    public static final C8373dje eI;
    public static final C8373dje eJ;
    public static final C8373dje eK;
    public static final C8373dje eL;
    public static final C8373dje eM;
    public static final C8373dje eN;
    public static final C8373dje eO;
    public static final C8373dje eP;
    public static final C8373dje eQ;
    public static final C8373dje eR;
    public static final C8373dje eS;
    public static final C8373dje eT;
    public static final C8373dje eU;
    public static final C8373dje eV;
    public static final C8373dje eW;
    public static final C8373dje eX;
    public static final C8373dje eY;
    public static final C8373dje eZ;
    public static final C8373dje ea;
    public static final C8373dje eb;
    public static final C8373dje ec;
    public static final C8373dje ed;
    public static final C8373dje ee;
    public static final C8373dje ef;
    public static final C8373dje eg;
    public static final C8373dje eh;
    public static final C8373dje ei;
    public static final C8373dje ej;
    public static final C8373dje ek;
    public static final C8373dje el;
    public static final C8373dje em;
    public static final C8373dje en;
    public static final C8373dje eo;
    public static final C8373dje ep;
    public static final C8373dje eq;
    public static final C8373dje er;
    public static final C8373dje es;
    public static final C8373dje et;
    public static final C8373dje eu;
    public static final C8373dje ev;
    public static final C8373dje ew;
    public static final C8373dje ex;
    public static final C8373dje ey;
    public static final C8373dje ez;
    public static final C8373dje fA;
    public static final C8373dje fB;
    public static final C8373dje fC;
    public static final C8373dje fD;
    public static final C8373dje fE;
    public static final C8373dje fF;
    public static final C8373dje fG;
    public static final C8373dje fH;
    public static final C8373dje fI;
    public static final C8373dje fJ;
    public static final C8373dje fK;
    public static final C8373dje fL;
    public static final C8373dje fM;
    public static final C8373dje fN;
    public static final C8373dje fO;
    public static final C8373dje fP;
    public static final C8373dje fQ;
    public static final C8373dje fR;
    public static final C8373dje fS;
    public static final C8373dje fT;
    public static final C8373dje fU;
    public static final C8373dje fV;
    public static final C8373dje fW;
    public static final C8373dje fX;
    public static final C8373dje fY;
    public static final C8373dje fZ;
    public static final C8373dje fa;
    public static final C8373dje fb;
    public static final C8373dje fc;
    public static final C8373dje fd;
    public static final C8373dje fe;
    public static final C8373dje ff;
    public static final C8373dje fg;
    public static final C8373dje fh;

    /* renamed from: fi  reason: collision with root package name */
    public static final C8373dje f13849fi;
    public static final C8373dje fj;
    public static final C8373dje fk;
    public static final C8373dje fl;
    public static final C8373dje fm;
    public static final C8373dje fn;
    public static final C8373dje fo;
    public static final C8373dje fp;
    public static final C8373dje fq;
    public static final C8373dje fr;
    public static final C8373dje fs;
    public static final C8373dje ft;
    public static final C8373dje fu;
    public static final C8373dje fv;
    public static final C8373dje fw;
    public static final C8373dje fx;
    public static final C8373dje fy;
    public static final C8373dje fz;
    public static final C8373dje ga;
    public static final C8373dje gb;
    public static final C8373dje gc;
    public static final C8373dje gd;
    public static final C8373dje ge;
    public static final C8373dje gf;
    public static final C8373dje gg;
    public static final C8373dje gh;
    public static final C8373dje gi;
    public static final C8373dje gj;
    public static final C8373dje gk;
    public static final C8373dje gl;
    public static final C8373dje gm;
    public static final C8373dje gn;
    public static final C8373dje go;

    static {
        MslConstants.ResponseCode responseCode = MslConstants.ResponseCode.FAIL;
        dB = new C8377dji(22, responseCode, "Error parsing ASN.1.");
        dC = new C8377dji(23, responseCode, "Error encoding ASN.1.");
        go = new C8377dji(49, responseCode, "Error parsing XML.");
        gm = new C8377dji(50, responseCode, "Error encoding XML.");
        MslConstants.ResponseCode responseCode2 = MslConstants.ResponseCode.ENTITY_REAUTH;
        eS = new C8377dji(1009, responseCode2, "Master token sequence number does not have the expected value.");
        eM = new C8377dji(1013, responseCode2, "Master token entity identity is revoked.");
        eL = new C8377dji(1016, responseCode2, "Master token entity identity is not permitted.");
        MslConstants.ResponseCode responseCode3 = MslConstants.ResponseCode.USER_REAUTH;
        fN = new C8377dji(2013, responseCode3, "The user identity was not found.");
        fT = new C8377dji(2014, responseCode3, "The user identity must be reauthenticated because the password version changed.");
        fR = new C8377dji(2015, responseCode, "The user ID token MSL user type is incorrect.");
        fV = new C8377dji(2016, responseCode3, "The user ID token MSL user is invalid.");
        MslConstants.ResponseCode responseCode4 = MslConstants.ResponseCode.TRANSIENT_FAILURE;
        fG = new C8377dji(2017, responseCode4, "Error communicating with membership service");
        MslConstants.ResponseCode responseCode5 = MslConstants.ResponseCode.USERDATA_REAUTH;
        fU = new C8377dji(2018, responseCode5, "Previous credentials are no longer valid");
        fS = new C8377dji(2019, responseCode3, "The user identity was not found.");
        fQ = new C8377dji(2020, responseCode3, "The user identity was not found.");
        fM = new C8377dji(2021, responseCode3, "The user identity was not found.");
        fX = new C8377dji(2022, responseCode5, "User must login again.");
        eh = new C8377dji(4005, responseCode, "Entity not recognized.");
        eD = new C8377dji(4006, responseCode, "Entity used incorrect entity authentication data type.");
        dQ = new C8377dji(4024, responseCode, "Cryptex RSA key set not found.");
        eg = new C8377dji(4025, responseCode, "Entity is revoked.");
        MslConstants.ResponseCode responseCode6 = MslConstants.ResponseCode.ENTITYDATA_REAUTH;
        dt = new C8377dji(4028, responseCode6, "Error parsing Anycast challenge.");
        dv = new C8377dji(4029, responseCode6, "Anycast challenge is not acceptable.");
        gn = new C8377dji(4030, responseCode6, "X.509 certificates are missing from entity auth.");
        dL = new C8377dji(4031, responseCode, "Cryptex ECC key set not found.");
        fA = new C8377dji(4032, responseCode, "Invalid MSL Trust Store found.");
        ej = new C8377dji(4033, responseCode, "Entity migration is not allowed.");
        et = new C8377dji(4034, responseCode6, "FairPlay Streaming key request is invalid.");
        gb = new C8377dji(4035, responseCode6, "Widevine key request is invalid.");
        ga = new C8377dji(4036, responseCode6, "Widevine device type does not match that in the key request.");
        fY = new C8377dji(4037, responseCode6, "Error from Widevine Challenge Info endpoint.");
        fW = new C8377dji(4038, responseCode6, "Widevine entity auth data format invalid - bad devtype.");
        fZ = new C8377dji(4039, responseCode6, "Widevine entity auth data format invalid - bad cdmId.");
        ek = new C8377dji(4040, responseCode6, "Fairplay Streaming Model Group Key entity auth data inconsistent.");
        eo = new C8377dji(4041, responseCode, "Internal error from Fairplay Challenge Info endpoint.");
        gc = new C8377dji(4042, responseCode6, "Widevine challenge signature is all zeros.");
        ev = new C8377dji(4043, responseCode6, "Unknown error from Fairplay Challenge Info endpoint.");
        en = new C8377dji(4044, responseCode6, "Fairplay challenge is invalid.");
        es = new C8377dji(4045, responseCode6, "Fairplay license creation error.");
        ew = new C8377dji(4046, responseCode6, "Fairplay supported version mismatch.");
        ef = new C8377dji(4047, responseCode6, "Fairplay app certificate hash not found.");
        eu = new C8377dji(4048, responseCode6, "Fairplay malformed TLLV.");
        el = new C8377dji(4049, responseCode6, "Fairplay feature not available.");
        ep = new C8377dji(4050, responseCode6, "Fairplay lease value required.");
        er = new C8377dji(4051, responseCode6, "Fairplay invalid keyid checksum.");
        em = new C8377dji(4052, responseCode6, "Fairplay bad lease strategy.");
        eq = new C8377dji(4053, responseCode6, "Fairplay invalid SPC version.");
        eA = new C8377dji(4054, responseCode, "Invalid identity string.");
        ei = new C8377dji(4055, responseCode, "Entity auth rate limit tripped.");
        dw = new C8377dji(4056, responseCode6, "app id or app version is invalid.");
        dz = new C8377dji(4057, responseCode6, "app hmac is not found.");
        dx = new C8377dji(4058, responseCode6, "Invalid app identity.");
        dD = new C8377dji(4059, responseCode6, "App Id Signing failed.");
        dE = new C8377dji(4060, responseCode6, "App Id Validation failed.");
        dy = new C8377dji(4061, responseCode6, "App Id Signer is invalid.");
        dA = new C8377dji(4062, responseCode6, "App Id not permitted.");
        eb = new C8377dji(4063, responseCode6, "device token parsing failed");
        ed = new C8377dji(4064, responseCode6, "device token authentication failed");
        fj = new C8377dji(4065, responseCode6, "Error from Playready Challenge Info endpoint.");
        eB = new C8377dji(5000, responseCode5, "User must login again.");
        fh = new C8377dji(5001, responseCode5, "Netflix ID cookie identity has expired.");
        fg = new C8377dji(5002, responseCode5, "Netflix ID cookie is blank.");
        fr = new C8377dji(5003, responseCode5, "Secure Netflix ID cookie is blank.");
        fe = new C8377dji(5004, responseCode5, "Netflix Id Cookie is device bound, and can not be used for user identity");
        dI = new C8377dji(5005, responseCode4, "Unknown error communicating with authentication manager.");
        dF = new C8377dji(5006, responseCode4, "Error communicating with authentication manager.");
        ec = new C8377dji(5007, responseCode5, "Email or password is incorrect.");
        fm = new C8377dji(5008, responseCode5, "Password has not been set.");
        MslConstants.ResponseCode responseCode7 = MslConstants.ResponseCode.SSOTOKEN_REJECTED;
        fo = new C8377dji(5009, responseCode7, "SSO token is blank.");
        fu = new C8377dji(5010, responseCode5, "SSO token is not associated with a Netflix user.");
        fn = new C8377dji(5012, responseCode5, "Profile GUID is blank.");
        fs = new C8377dji(5015, responseCode7, "SSO token invalid.");
        dr = new C8377dji(5017, responseCode4, "Error communicating with the account manager.");
        fw = new C8377dji(5018, responseCode4, "SSO user association failed.");
        fx = new C8377dji(5019, responseCode4, "SSO user disassociation failed.");
        fb = new C8377dji(5020, responseCode5, "MDX user authentication data verification failed.");
        fa = new C8377dji(5021, responseCode5, "MDX device activation check failed.");
        eY = new C8377dji(5022, responseCode5, "MDX user authentication data action is invalid.");
        dY = new C8377dji(5023, responseCode5, "CTicket decryption failed.");
        dX = new C8377dji(5026, responseCode5, "Error creating CTicket crypto context.");
        eP = new C8377dji(5027, responseCode5, "MDX controller or target PIN is blank.");
        eX = new C8377dji(5028, responseCode5, "MDX controller and target PIN mismatch.");
        eZ = new C8377dji(5029, responseCode5, "MDX controller user ID token or CTicket is not decrypted or verified.");
        eQ = new C8377dji(5031, responseCode5, "MDX controller authentication data is invalid.");
        fz = new C8377dji(5032, responseCode5, "User authentication data does not match entity identity.");
        fF = new C8377dji(5033, responseCode, "Entity used incorrect user authentication data type.");
        fy = new C8377dji(5034, responseCode5, "SSO user association failed because the customer is not a member.");
        ft = new C8377dji(5035, responseCode5, "SSO user association failed because the customer is a former member.");
        fv = new C8377dji(5036, responseCode5, "SSO user association failed because the token identifies a different member.");
        fq = new C8377dji(5038, responseCode5, "Not permitted to switch to the requested user profile.");
        fc = new C8377dji(5039, responseCode4, "Error communicating with the membership manager.");
        fL = new C8377dji(5040, responseCode5, "No entity association record found for the user.");
        ez = new C8377dji(5041, responseCode, "The MSL user type is incorrect.");
        fH = new C8377dji(5042, responseCode5, "User entity association record query returned an error.");
        fE = new C8377dji(5043, responseCode5, "User entity association record query returned different entity identities.");
        fC = new C8377dji(5044, responseCode5, "User entity association record is deactivated.");
        fO = new C8377dji(5045, responseCode5, "User entity association record query returned different user identities.");
        fK = new C8377dji(5046, responseCode3, "No entity association record found for the user.");
        fJ = new C8377dji(5047, responseCode3, "User entity association record query returned an error.");
        fI = new C8377dji(5048, responseCode3, "User entity association record query returned different entity identities.");
        fD = new C8377dji(5049, responseCode3, "User entity association record is deactivated.");
        fP = new C8377dji(5050, responseCode3, "User entity association record query returned different user identities.");
        fl = new C8377dji(5052, responseCode4, "Unexpected result validating Netflix ID cookies.");
        ee = new C8377dji(5053, responseCode4, "The maximum number of devices has been reached for this user.");
        fB = new C8377dji(5054, responseCode5, "Entity can only be used with a test user account.");
        ff = new C8377dji(5055, responseCode4, "Exception encountered validating Netflix ID cookies.");
        fd = new C8377dji(5056, responseCode5, "Migration userdata requires either target master token or entity identity.");
        eV = new C8377dji(5057, responseCode5, "MDX authentication data must have both target identity and expiration.");
        eO = new C8377dji(5058, responseCode5, "MDX enhanced pin format parse failure.");
        eT = new C8377dji(5059, responseCode, "MSL client not synchronized to remote time.");
        eU = new C8377dji(5060, responseCode5, "controller intended target identity doesn't match entity identity.");
        eR = new C8377dji(5061, responseCode5, "MDX pin has expired.");
        eW = new C8377dji(5062, responseCode5, "MDX pin creation date is in the future.");
        fk = new C8377dji(6032, responseCode, "Non-replayable message non-replayable ID is out of range.");
        eJ = new C8377dji(7000, responseCode, "Invalid key exchange GUID.");
        eE = new C8377dji(7001, responseCode4, "Error communicating with key exchange service");
        eF = new C8377dji(7002, responseCode, "Identity in challenge doesn't match device identity");
        eG = new C8377dji(7003, responseCode, "Error returned by key exchange service");
        eC = new C8377dji(7004, responseCode, "Request rejected by key exchange service");
        eN = new C8377dji(7005, responseCode4, "Internal error encountered during key exchange");
        eK = new C8377dji(7006, responseCode, "Request failed validation during key exchange");
        eH = new C8377dji(7007, responseCode, "Request blacklisted by key exchange service");
        eI = new C8377dji(7008, responseCode, "Request could not be decoded by key exchange service");
        gh = new C8377dji(7009, responseCode2, "Widevine key exchange entity authentication scheme unknown.");
        gj = new C8377dji(7010, responseCode2, "Widevine key exchange issuer data parse error.");
        gf = new C8377dji(7011, responseCode2, "Widevine key exchange identity mismatch between key request data and entity auth data");
        gg = new C8377dji(7012, responseCode2, "Widevine key exchange identity mismatch between key request data and mastertoken");
        ge = new C8377dji(7013, responseCode2, "Widevine key exchange CDM ID mismatch between key request data and previous mastertoken");
        gk = new C8377dji(7014, responseCode2, "Widevine key exchange challenge signature is all zeros.");
        gl = new C8377dji(7015, responseCode2, "Widevine key exchange data missing DUID.");
        gd = new C8377dji(7016, responseCode2, "Widevine key request CDM ID invalid.");
        gi = new C8377dji(7017, responseCode2, "Widevine key exchange and entity auth data DUID mismatch.");
        fp = new C8377dji(7021, responseCode2, "PlayReady key exchange challenge signature is all zeros.");
        ex = new C8377dji(7022, responseCode, "Missing mandatory EAD for FPSEA+ADH keyx");
        ey = new C8377dji(7023, responseCode, "Incompatible entity auth data provided for FPSEA+ADH keyx");
        dN = new C8377dji(8000, responseCode, "Error encrypting data with cryptex.");
        dH = new C8377dji(8001, responseCode, "Error decrypting data with cryptex.");
        dU = new C8377dji(8002, responseCode, "Error computing MAC with cryptex.");
        dW = new C8377dji(8003, responseCode, "Error verifying MAC or signature with cryptex.");
        dG = new C8377dji(8004, responseCode, "Error creating cryptex cipher or MAC context.");
        ea = new C8377dji(8005, responseCode4, "Error accessing data model device.");
        dV = new C8377dji(8006, responseCode, "Data model device type not found.");
        dP = new C8377dji(8007, responseCode, "Cryptex key set not supported.");
        dR = new C8377dji(8008, responseCode, "Insufficient privileges for cryptex operation.");
        dZ = new C8377dji(8009, responseCode, "Error wrapping data with cryptex.");
        dS = new C8377dji(8010, responseCode, "Error unwrapping data with cryptex.");
        dK = new C8377dji(8011, responseCode4, "Error communicating with cryptex.");
        dT = new C8377dji(8012, responseCode, "Error computing signature with cryptex.");
        dO = new C8377dji(8013, responseCode, "Error computing key fingerprint with cryptex.");
        dJ = new C8377dji(8014, responseCode, "Bypassing Error Header Signing.");
        f13849fi = new C8373dje(8015, responseCode, "Failed to process passport actions.");
        dM = new C8377dji(8016, responseCode, "Error computing HKDF with cryptex.");
    }

    protected C8377dji(int i, MslConstants.ResponseCode responseCode, String str) {
        super(i + 100000, responseCode, str);
    }

    @Override // o.C8373dje
    public String toString() {
        return "NetflixMslError{" + a() + "}";
    }
}
