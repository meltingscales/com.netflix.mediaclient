package com.netflix.mediaclient;

import androidx.annotation.Keep;
import org.chromium.net.NetError;

@Keep
/* loaded from: classes.dex */
public enum StatusCode {
    UNKNOWN(-1),
    INTERNAL_ERROR(-2),
    NETWORK_ERROR(-3),
    NRD_ERROR(-4),
    OBSOLETE_APP_VERSION(-5),
    SET_FAILED(-6),
    CONFIG_REFRESH_FAILED(-7),
    FORCED_TESTING_ERROR(-8),
    INIT_SERVICE_TIMEOUT(-9),
    NOT_IMPLEMENTED(-10),
    NO_CONNECTIVITY(-11),
    CONFIG_DOWNLOAD_FAILED(-12),
    FATAL_CONFIG_DOWNLOAD_FAILED(-14),
    VOIP_CONFIG_DOWNLOAD_FAILED(-15),
    FATAL_ESN_BASED_CONFIG_DOWNLOAD_FAILED(-16),
    INVALID_ARGUMENTS(-17),
    FATAL_CONFIG_BLACKLISTED(-18),
    ESN_MIGRATION_NO_CONNECTIVITY(-19),
    NRD_INVALID_SW_VERSION(-20),
    SERVICE_NOT_AVAILABLE(-21),
    API_ENDPOINTS_NOT_AVAILABLE(-22),
    NRD_LOGIN_ONGOING(-40),
    NRD_REGISTRATION_EXISTS(-41),
    ERROR_OTP_NO_MORE_RESENDS_AB54131(-42),
    ERROR_OTP_INVALID_PIN_AB54131(-43),
    ERROR_OTP_EXPIRED_AB54131(-44),
    ERROR_OTP_GENERIC_AB54131(-45),
    ERROR_UNRECOGNIZED_PHONE(-46),
    ERROR_FORMER_MEMBER_CONSUMPTION(-47),
    ERROR_FORMER_MEMBER_REDIRECT(-48),
    ERROR_NEVER_MEMBER_CONSUMPTION(-49),
    ERROR_NEVER_MEMBER_REDIRECT(-50),
    ERROR_DVD_MEMBER_REDIRECT(-51),
    ERROR_UNRECOGNIZED_CONSUMPTION(-52),
    ERROR_UNRECOGNIZED_REDIRECT(-53),
    ERROR_UNRECOGNIZED_EMAIL(-54),
    ERROR_INCORRECT_PASSWORD(-55),
    ERROR_ACCOUNT_PASSWORD_NOT_SET(-56),
    USER_SIGNIN_THROTTLED(-56),
    USER_SIGNIN_FAILURE_TRY_SIGNUP(-57),
    USER_SIGNIN_RETRY(-58),
    ERROR_OTP_NOT_DELIVERED_AB54131(-59),
    WRONG_PATH(-60),
    USER_NOT_AUTHORIZED(-61),
    SERVER_ERROR(-62),
    MISSING_ID_IN_CACHE(-63),
    SERVER_ERROR_MAP_CACHE_MISS(-64),
    MAP_ERROR(-65),
    BROWSE_AGENT_WRONG_STATE(-66),
    BROWSE_IQ_WRONG_STATE(-67),
    BROWSE_CW_WRONG_STATE(-68),
    DELETED_PROFILE(-69),
    INVALID_COUNRTY(-70),
    INSUFFICIENT_CONTENT(-71),
    SWITCH_PROFILE_UNKNOWN_ID(-72),
    NO_PROFILES_FOUND(-73),
    PRIMARY_PROFILE_NOT_FOUND(-74),
    PROFILE_OPERATION_ERROR(-75),
    FALKOR_RESPONSE_PARSE_ERROR(-80),
    FALKOR_TASK_CANCELLED(-81),
    SIGN_IN_CONFIG_ERROR(-82),
    FEATURE_CONFIG_ERROR(-83),
    REFRESH_SIGN_IN_CONFIG_ERROR(-84),
    NRM_LANG_CONFIG_ERROR(-85),
    SYNTH_CONFIG_ERROR(-86),
    CUSTOMER_SUPPORT_CONFIG_ERROR(-87),
    FAST_PROPERTIES_CONFIG_ERROR(-88),
    DRM_FAILURE_CDM_PROVISIONING(-90),
    DRM_FAILURE_CDM_PROVISIONING_EMPTY(-92),
    DRM_FAILURE_CDM_FAILED_TO_PROVIDE_PROVISION_RESPONSE(-93),
    DRM_RESOURCES_NOT_READY(-94),
    DRM_RESOURCES_SUSPENDED(-95),
    DRM_FAILURE_MEDIADRM_RECOVERY_FROM_SUSPEND_UNABLE_TO_CREATE_DRM(-96),
    DRM_FAILURE_MEDIADRM_SUSPENDED_KEYS_RESTORE_FAILED(-97),
    DRM_FAILURE_MEDIADRM_IN_RECOVERY_FROM_SUSPEND_KEYS_RESTORE_FAILED(-98),
    DRM_FAILURE_MEDIADRM_STATE_EXCEPTION(-99),
    DRM_FAILURE_CDM_GENERIC_ERROR(-100),
    DRM_FAILURE_GOOGLE_CDM_PROVISIONING_DENIED(NetError.ERR_CONNECTION_RESET),
    DRM_FAILURE_CDM_KEY_SET_EMPTY(NetError.ERR_CONNECTION_REFUSED),
    DRM_FAILURE_CDM_RESOURCE_BUSY(NetError.ERR_CONNECTION_ABORTED),
    DRM_FAILURE_CDM_LICENSE_EMPTY(NetError.ERR_CONNECTION_FAILED),
    DRM_FAILURE_FORCE_CRYPTO_FALLBACK(NetError.ERR_NAME_NOT_RESOLVED),
    DRM_FAILURE_CDM_NOT_PROVISIONED(NetError.ERR_INTERNET_DISCONNECTED),
    DRM_FAILURE_CDM_SERVER_DENIED(NetError.ERR_SSL_PROTOCOL_ERROR),
    DRM_FAILURE_CDM_EXCEPTION(NetError.ERR_ADDRESS_INVALID),
    DRM_FAILURE_MEDIADRM_WIDEVINE_PLUGIN_BLOCKED(NetError.ERR_ADDRESS_UNREACHABLE),
    DRM_FAILURE_MEDIADRM_WIDEVINE_PLUGIN_CHANGED(NetError.ERR_SSL_CLIENT_AUTH_CERT_NEEDED),
    DRM_FAILURE_MEDIADRM_SIGN(NetError.ERR_TUNNEL_CONNECTION_FAILED),
    DRM_FAILURE_MEDIADRM_VERIFY(NetError.ERR_NO_SSL_VERSIONS_ENABLED),
    DRM_FAILURE_MEDIADRM_DECRYPT(NetError.ERR_SSL_VERSION_OR_CIPHER_MISMATCH),
    DRM_FAILURE_MEDIADRM_ENCRYPT(NetError.ERR_SSL_RENEGOTIATION_REQUESTED),
    DRM_FAILURE_MEDIADRM_GET_KEY_REQUEST(NetError.ERR_PROXY_AUTH_UNSUPPORTED),
    DRM_FAILURE_MEDIADRM_PROVIDE_KEY_RESPONSE(-116),
    DRM_FAILURE_MEDIADRM_KEYS_RESTORE_FAILED(NetError.ERR_BAD_SSL_CLIENT_AUTH_CERT),
    DRM_FAILURE_MEDIADRM_RESET(NetError.ERR_CONNECTION_TIMED_OUT),
    DRM_FAILURE_GOOGLE_DECLINED_PROVISIONING(NetError.ERR_HOST_RESOLVER_QUEUE_TOO_LARGE),
    HTTP_SSL_ERROR(NetError.ERR_SOCKS_CONNECTION_FAILED),
    HTTP_SSL_DATE_TIME_ERROR(NetError.ERR_SOCKS_CONNECTION_HOST_UNREACHABLE),
    HTTP_SSL_NO_VALID_CERT(NetError.ERR_ALPN_NEGOTIATION_FAILED),
    HTTP_ERR_404(NetError.ERR_SSL_NO_RENEGOTIATION),
    HTTP_ERR_TIMEOUT(NetError.ERR_WINSOCK_UNEXPECTED_WRITTEN_BYTES),
    HTTP_ERR_MALFORMED_URL(NetError.ERR_SSL_DECOMPRESSION_FAILURE_ALERT),
    HTTP_ERR_NOT_RESOLVED(NetError.ERR_SSL_BAD_RECORD_MAC_ALERT),
    HTTP_ERROR_UNKNOWN(NetError.ERR_PROXY_AUTH_REQUESTED),
    HTTP_ERR_413(-128),
    HTTP_ERR_502(-129),
    DL_URL_DOWNLOAD_DISK_IO_ERROR(NetError.ERR_PROXY_CONNECTION_FAILED),
    DL_TITTLE_ALREADY_DOWNLOADED(NetError.ERR_MANDATORY_PROXY_CONFIGURATION_FAILED),
    DL_REGISTRY_CHECKSUM_FAILED(-132),
    DL_ALL_CDN_URLS_FAILED(NetError.ERR_PRECONNECT_MAX_SOCKET_LIMIT),
    DL_OFFLINE_STORAGE_NOT_AVAILABLE(NetError.ERR_SSL_CLIENT_AUTH_PRIVATE_KEY_ACCESS_DENIED),
    DL_CANT_CREATE_VIEWABLE_DIRECTORY(NetError.ERR_SSL_CLIENT_AUTH_CERT_NO_PRIVATE_KEY),
    DL_CANT_PERSIST_MANIFEST(NetError.ERR_PROXY_CERTIFICATE_INVALID),
    DL_MANIFEST_NO_TRACKS_TO_DOWNLOAD(NetError.ERR_NAME_RESOLUTION_FAILED),
    DL_CANT_DELETE_DOWNLOADABLES(NetError.ERR_NETWORK_ACCESS_DENIED),
    DL_CANT_DELETE_PLAYABLE_DIRECTORY(NetError.ERR_TEMPORARILY_THROTTLED),
    DL_NOT_ENOUGH_FREE_SPACE(NetError.ERR_HTTPS_PROXY_TUNNEL_RESPONSE_REDIRECT),
    DL_MANIFEST_NOT_FOUND_IN_CACHE(NetError.ERR_SSL_CLIENT_AUTH_SIGNATURE_FAILED),
    DL_CANT_PERSIST_REGISTRY(NetError.ERR_MSG_TOO_BIG),
    DL_TITTLE_ALREADY_REQUESTED_FOR_DOWNLOAD(-143),
    DL_OFFLINE_AGENT_NOT_READY(-144),
    DL_OFFLINE_PLAYABLE_NOT_FOUND(NetError.ERR_WS_PROTOCOL_ERROR),
    DL_USER_NOT_LOGGED_IN(NetError.ERR_ADDRESS_IN_USE),
    DL_ENCODES_ARE_NOT_AVAILABLE(NetError.ERR_SSL_HANDSHAKE_NOT_COMPLETED),
    DL_MANIFEST_DATA_MISSING(NetError.ERR_SSL_BAD_PEER_PUBLIC_KEY),
    DL_BUSY_TRY_DELETE_AGAIN(NetError.ERR_SSL_PINNED_KEY_NOT_IN_CERT_CHAIN),
    DL_PLAY_WINDOW_RENEW_FAILED(NetError.ERR_CLIENT_AUTH_CERT_TYPE_UNSUPPORTED),
    DL_LIMIT_CANT_DOWNLOAD_TILL_DATE(-152),
    DL_LIMIT_TOO_MANY_DOWNLOADED_DELETE_SOME(NetError.ERR_SSL_DECRYPT_ERROR_ALERT),
    DL_LIMIT_TOO_MANY_DEVICES_PLAN_OPTION(NetError.ERR_WS_THROTTLE_QUEUE_TOO_LARGE),
    DL_ENCODES_DELETE_ON_REVOCATION(-155),
    DL_TOTAL_LICENSE_PER_DEVICE_LIMIT(NetError.ERR_SSL_SERVER_CERT_CHANGED),
    DL_VIEWABLE_DIRECTORY_MISSING(-157),
    DL_BLACKLISTED_DEVICE(-158),
    DL_MONTHLY_DOWNLOAD_LIMIT(NetError.ERR_SSL_UNRECOGNIZED_NAME_ALERT),
    DRM_FAILURE_CDM_NO_LICENSE_RELEASE_ACK(NetError.ERR_SOCKET_SET_RECEIVE_BUFFER_SIZE_ERROR),
    DRM_FAILURE_NO_SESSION(NetError.ERR_SOCKET_SET_SEND_BUFFER_SIZE_ERROR),
    DRM_FAILURE_MEDIA_SERVER_DIED(NetError.ERR_SOCKET_RECEIVE_BUFFER_SIZE_UNCHANGEABLE),
    INIT_SERVICE_TIMEOUT_USER_LOAD(NetError.ERR_SOCKET_SEND_BUFFER_SIZE_UNCHANGEABLE),
    INIT_SERVICE_TIMEOUT_USER_MISSING_COOKIES(NetError.ERR_SSL_CLIENT_AUTH_CERT_BAD_FORMAT),
    INIT_SERVICE_TIMEOUT_USER_REFRESH_CONFIG(-165),
    INIT_SERVICE_TIMEOUT_USER_RECOVER_OVER_MSL(NetError.ERR_ICANN_NAME_COLLISION),
    INIT_SERVICE_TIMEOUT_USER_RECOVER_OVER_COOKIES(NetError.ERR_SSL_SERVER_CERT_BAD_FORMAT),
    INIT_SERVICE_TIMEOUT_CONFIG_LOAD(NetError.ERR_UNABLE_TO_REUSE_CONNECTION_FOR_PROXY_AUTH),
    INIT_SERVICE_TIMEOUT_CONFIG_FETCH(NetError.ERR_CT_CONSISTENCY_PROOF_PARSING_FAILED),
    INIT_SERVICE_TIMEOUT_CONFIG_CREATE_CRYPTO(NetError.ERR_SSL_OBSOLETE_CIPHER),
    INIT_SERVICE_TIMEOUT_CONFIG_FIND_DEVICE_ID(NetError.ERR_WS_UPGRADE),
    INIT_SERVICE_TIMEOUT_CONFIG_CREATE_ESN(NetError.ERR_READ_IF_READY_NOT_IMPLEMENTED),
    INIT_SERVICE_TIMEOUT_CONFIG_INIT_CRYPTO(-175),
    INIT_SERVICE_TIMEOUT_CONFIG_ESN_FETCH(NetError.ERR_NO_BUFFER_SPACE),
    INIT_SERVICE_TIMEOUT_PUSH(NetError.ERR_TLS13_DOWNGRADE_DETECTED),
    INIT_SERVICE_TIMEOUT_MDX(NetError.ERR_SSL_KEY_USAGE_INCOMPATIBLE),
    INIT_SERVICE_TIMEOUT_PROBE(NetError.ERR_ECH_NOT_NEGOTIATED),
    INIT_SERVICE_TIMEOUT_FALKOR(NetError.ERR_ECH_FALLBACK_CERTIFICATE_INVALID),
    INIT_SERVICE_TIMEOUT_ZUUL(-185),
    INIT_SERVICE_TIMEOUT_VOIP(-186),
    INIT_SERVICE_TIMEOUT_CONFIG(-187),
    INIT_SERVICE_TIMEOUT_USER(-188),
    INIT_SERVICE_TIMEOUT_RESOURCES(-189),
    INIT_SERVICE_TIMEOUT_OFFLINE(-190),
    INIT_SERVICE_TIMEOUT_MONEYBALL(-191),
    INIT_SERVICE_TIMEOUT_DIAGNOSIS(-192),
    INIT_SERVICE_TIMEOUT_PRE_APP(-193),
    INIT_SERVICE_TIMEOUT_ERROR(-194),
    INIT_SERVICE_TIMEOUT_PLAYER(-195),
    INIT_SERVICE_TIMEOUT_LOG(-196),
    INIT_SERVICE_TIMEOUT_CDX(-197),
    NRD_LOGIN_ACTIONID_1(NetError.ERR_CERT_COMMON_NAME_INVALID),
    NRD_LOGIN_ACTIONID_2(NetError.ERR_CERT_DATE_INVALID),
    NRD_LOGIN_ACTIONID_3(NetError.ERR_CERT_AUTHORITY_INVALID),
    NRD_LOGIN_ACTIONID_4(NetError.ERR_CERT_CONTAINS_ERRORS),
    NRD_LOGIN_ACTIONID_5(NetError.ERR_CERT_NO_REVOCATION_MECHANISM),
    NRD_LOGIN_ACTIONID_6(NetError.ERR_CERT_UNABLE_TO_CHECK_REVOCATION),
    NRD_LOGIN_ACTIONID_7(NetError.ERR_CERT_REVOKED),
    NRD_LOGIN_ACTIONID_8(NetError.ERR_CERT_INVALID),
    NRD_LOGIN_ACTIONID_9(NetError.ERR_CERT_WEAK_SIGNATURE_ALGORITHM),
    NRD_LOGIN_ACTIONID_10(-209),
    NRD_LOGIN_ACTIONID_11(NetError.ERR_CERT_NON_UNIQUE_NAME),
    NRD_LOGIN_ACTIONID_12(NetError.ERR_CERT_WEAK_KEY),
    INIT_SERVICE_TIMEOUT_MSL_LOAD(NetError.ERR_CERT_SYMANTEC_LEGACY),
    INIT_SERVICE_TIMEOUT_MSL_CREATE_CLIENT(-216),
    INIT_SERVICE_TIMEOUT_MSL_CREATE_CONTEXT(NetError.ERR_CERT_KNOWN_INTERCEPTION_BLOCKED),
    INIT_SERVICE_TIMEOUT_MSL_LOAD_STORE(-218),
    INIT_SERVICE_TIMEOUT_MSL_ESN_MIGRATION(NetError.ERR_CERT_END),
    INIT_SERVICE_TIMEOUT_MSL_ESN_MIGRATION_PING(-220),
    INIT_SERVICE_TIMEOUT_MSL_APPBOOT(-221),
    RESPONSE_PARSE_ERROR(NetError.ERR_INVALID_URL),
    BLADERUNNER_FAILURE(NetError.ERR_INVALID_RESPONSE),
    OFFLINE_LICENSE_MAX_DEVICE_LIMIT(NetError.ERR_INVALID_CHUNKED_ENCODING),
    OFFLINE_LICENSE_NOT_TESTER(NetError.ERR_METHOD_NOT_SUPPORTED),
    OFFLINE_LICENSE_ERROR(NetError.ERR_UNEXPECTED_PROXY_AUTH),
    OFFLINE_LICENSE_FETCH_NEW(NetError.ERR_EMPTY_RESPONSE),
    BLADERUNNER_RETRY(NetError.ERR_RESPONSE_HEADERS_TOO_BIG),
    API_REQUEST_UNSUCCESSFUL(-326),
    NODEQUARK_FAILURE(NetError.ERR_CONTENT_DECODING_FAILED),
    NODEQUARK_RETRY(NetError.ERR_NETWORK_IO_SUSPENDED),
    CREATE_SSO_TOKEN_FAILURE(NetError.ERR_SYN_REPLY_NOT_RECEIVED),
    RENEW_SSO_TOKEN_FAILURE(NetError.ERR_ENCODING_CONVERSION_FAILED),
    INT_ERR_ADVIS_VIDEO_ID_NULL(NetError.ERR_HTTP2_INADEQUATE_TRANSPORT_SECURITY),
    INT_ERR_CMP(NetError.ERR_HTTP2_FLOW_CONTROL_ERROR),
    INT_ERR_CMP_RESP_NULL(NetError.ERR_HTTP2_FRAME_SIZE_ERROR),
    INT_ERR_MDX_INIT(NetError.ERR_HTTP2_COMPRESSION_ERROR),
    INT_ERR_RESOURCE_URL_NULL(NetError.ERR_PROXY_AUTH_REQUESTED_WITH_NO_CONNECTION),
    INT_ERR_CB_NULL(NetError.ERR_HTTP_1_1_REQUIRED),
    INT_ERR_REALM_DETAILS_NULL(NetError.ERR_PROXY_HTTP_1_1_REQUIRED),
    INT_ERR_MNGR_NOT_READY(NetError.ERR_PAC_SCRIPT_TERMINATED),
    INT_ERR_SERVICE_DISCONNECTED(-368),
    INT_ERR_BAD_COOKIES(-369),
    INT_ERR_FALKOR_EXCEPTION(NetError.ERR_INVALID_HTTP_RESPONSE),
    INT_ERR_DEVICE_BAD(NetError.ERR_CONTENT_DECODING_INIT_FAILED),
    NET_GENERAL_NETWORK_ERROR(NetError.ERR_CACHE_MISS),
    NET_UNKNOWN_HOST_EXCEPTION(NetError.ERR_CACHE_READ_FAILURE),
    NET_CONNECTION_EXCEPTION(NetError.ERR_CACHE_WRITE_FAILURE),
    NET_SOCKET_TIMEOUT_EXCEPTION(NetError.ERR_CACHE_OPERATION_NOT_SUPPORTED),
    NET_MALFORMED_URL_ERROR(NetError.ERR_CACHE_OPEN_FAILURE),
    NET_NETWORK_IO_EXCEPTION(NetError.ERR_CACHE_CREATE_FAILURE),
    NET_CRONET_HOSTNAME_NOT_RESOLVED(-420),
    NET_CRONET_INTERNET_DISCONNECTED(-421),
    NET_CRONET_NETWORK_CHANGED(-422),
    NET_CRONET_TIMED_OUT(-423),
    NET_CRONET_CONNECTION_CLOSED(-424),
    NET_CRONET_CONNECTION_TIMED_OUT(-425),
    NET_CRONET_CONNECTION_REFUSED(-426),
    NET_CRONET_CONNECTION_RESET(-427),
    NET_CRONET_ADDRESS_UNREACHABLE(-428),
    NET_CRONET_QUIC_PROTOCOL_FAILED(-429),
    NET_CRONET_ERROR_OTHER(-430),
    NET_LAST_NETWORK_ERROR(-499),
    LOGOUT_FAILED(-521),
    MSL_FAILED_TO_CREATE_CLIENT_ON_APPBOOT(-1000),
    MSL_FAILED_TO_CREATE_CLIENT(-1001),
    MSL_FAILED_TO_UPDATE_USER_ID(-1002),
    MSL_LEGACY_CRYPTO(-1003),
    MSL_BLACKLISTED_DEVICE_FAILBACK(-1004),
    MSL_BLACKLISTED_DEVICE_FATAL(-1005),
    MSL_LEGACY_CRYPTO_BUT_USED_WIDEVINE_BEFORE(-1006),
    MSL_GENERIC_NETWORK_ERROR(-1007),
    MSL_USERAUTH_ENTITY_MISMATCH(-1008),
    MSL_GENERIC_EXCEPTION(-1009),
    MSL_WV_DECRYPT_ERROR(-1010),
    MSL_WV_ENCRYPT_ERROR(-1011),
    MSL_WV_VERIFY_ERROR(-1012),
    MSL_WV_SIGN_ERROR(-1013),
    MSL_SWITCH_PROFILE_BIND_FAIL(-1014),
    MSL_SWITCH_PROFILE_NO_AUTH_DATA(-1015),
    MSL_SWITCH_PROFILE_FAILED(-1016),
    WIDEVINE_L1_FAILURE_OS_UPGRADE(-1017),
    WIDEVINE_L3_FAILURE_OS_UPGRADE(-1018),
    WIDEVINE_PLUGIN_IN_BAD_STATE(-1019),
    MSL_APPBOOT_RETRY_MAX_REACHED(-1020),
    MSL_ESN_MISMATCH(-1021),
    MSL_USER_ID_TOKEN_NOT_FOUND(-1022),
    WIDEVINE_L1_NOT_SUPPORTED_WHEN_EXPECTED(-1023),
    MSL_BAD_CHALLENGE(-1024),
    MSL_WEA_ESN_MIGRATION_NEEDED(-1025),
    MSL_REFRESH_PROFILE_LIST(-1026),
    WIDEVINE_L1_ALL_ZEROS_SIGNATURE_CHALLENGE(-1027),
    WIDEVINE_FALLBACK_TESTING(-1028),
    MSL_INVALID_KEY_REQUEST(-1029),
    MSL_FAILED_TO_CREATE_CLIENT_NOT_SUPPORTED_CRYPTO(-1032),
    WIDEVINE_INITIAL_PROVISIONING_CHECK_FAILED(-1033),
    MSL_LAST_MSL_ERROR(-1100),
    DEVICE_NOT_SUPPORTED(-1101),
    MANIFEST_PARSE_ERROR(-2001),
    ADBREAK_PARSE_ERROR(-2100),
    MANIFEST_PREFETCH_PROCESSING_ERROR(-2200),
    MANIFEST_CACHE_EXTRACT_ERROR(-2300),
    UI_RESET_INTERACTIVE_ERROR(-4001),
    OK(0),
    NON_RECOMMENDED_APP_VERSION(1),
    ALREADY_IN_QUEUE(10),
    NOT_IN_QUEUE(11),
    NOT_VALID(12),
    DL_WARNING_DL_N_TIMES_BEFORE_DATE(13),
    MANIFEST_PREFETCH_CANCELLED_BY_PLAYBACK(14);
    
    private static final int DRM_ERROR_HIGH_VALUE;
    private static final int DRM_ERROR_LOW_VALUE;
    private static final int HTTP_ERROR_HIGH_VALUE;
    private static final int HTTP_ERROR_LOW_VALUE;
    private static final int MANIFEST_ERROR_HIGH;
    private static final int MANIFEST_ERROR_LOW;
    private int mValue;

    private static boolean inclusiveRange(int i, int i2, int i3) {
        return i >= i2 && i <= i3;
    }

    public int getValue() {
        return this.mValue;
    }

    public boolean isError() {
        return this.mValue < 0;
    }

    public boolean isSucess() {
        return this.mValue >= 0;
    }

    public boolean isWarning() {
        return this.mValue > 0;
    }

    static {
        StatusCode statusCode;
        StatusCode statusCode2;
        StatusCode statusCode3;
        StatusCode statusCode4;
        StatusCode statusCode5;
        StatusCode statusCode6;
        DRM_ERROR_LOW_VALUE = statusCode2.getValue();
        DRM_ERROR_HIGH_VALUE = statusCode.getValue();
        HTTP_ERROR_LOW_VALUE = statusCode4.getValue();
        HTTP_ERROR_HIGH_VALUE = statusCode3.getValue();
        MANIFEST_ERROR_LOW = statusCode6.getValue();
        MANIFEST_ERROR_HIGH = statusCode5.getValue();
    }

    StatusCode(int i) {
        this.mValue = i;
    }

    @Override // java.lang.Enum
    public String toString() {
        return "StatusCode: [ code: " + this.mValue + ", name: " + name() + "]";
    }

    public static StatusCode getStatusCodeByValue(int i) {
        StatusCode[] values;
        for (StatusCode statusCode : values()) {
            if (statusCode != null && statusCode.getValue() == i) {
                return statusCode;
            }
        }
        return UNKNOWN;
    }

    public boolean isDrmError() {
        return inclusiveRange(getValue(), DRM_ERROR_LOW_VALUE, DRM_ERROR_HIGH_VALUE);
    }

    public boolean isMslError() {
        return inclusiveRange(getValue(), MSL_LAST_MSL_ERROR.getValue(), MSL_FAILED_TO_CREATE_CLIENT.getValue());
    }

    public boolean isNetworkError() {
        return isNetworkError(getValue());
    }

    public boolean isHttpError() {
        return inclusiveRange(getValue(), HTTP_ERROR_LOW_VALUE, HTTP_ERROR_HIGH_VALUE);
    }

    public boolean isManifestError() {
        return inclusiveRange(getValue(), MANIFEST_ERROR_LOW, MANIFEST_ERROR_HIGH);
    }

    public static boolean isNetworkError(int i) {
        return NETWORK_ERROR.getValue() == i || inclusiveRange(i, NET_LAST_NETWORK_ERROR.getValue(), NET_GENERAL_NETWORK_ERROR.getValue());
    }
}
